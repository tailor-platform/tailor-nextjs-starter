// Code generated by graphql-codegen. DO NOT EDIT.

/* eslint-disable import/order */
/* eslint-disable import/newline-after-import */
import * as Types from "../types/graphql";

import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
const defaultOptions = {} as const;
export type EmployeesQueryVariables = Types.Exact<{ [key: string]: never }>;

export type EmployeesQuery = {
  employees?: {
    collection: Array<{
      id: string;
      employeeCode?: string | null;
      firstName?: string | null;
      lastName?: string | null;
    }>;
  } | null;
};

export type LoginMutationVariables = Types.Exact<{
  orgKey: Types.Scalars["String"]["input"];
  id: Types.Scalars["String"]["input"];
  password: Types.Scalars["String"]["input"];
}>;

export type LoginMutation = { login?: { token: string } | null };

export const EmployeesDocument = gql`
  query employees {
    employees {
      collection {
        id
        employeeCode
        firstName
        lastName
      }
    }
  }
`;

/**
 * __useEmployeesQuery__
 *
 * To run a query within a React component, call `useEmployeesQuery` and pass it any options that fit your needs.
 * When your component renders, `useEmployeesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useEmployeesQuery({
 *   variables: {
 *   },
 * });
 */
export const useEmployeesQuery = (
  baseOptions?: Apollo.QueryHookOptions<
    EmployeesQuery,
    EmployeesQueryVariables
  >,
) => {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useQuery<EmployeesQuery, EmployeesQueryVariables>(
    EmployeesDocument,
    options,
  );
};
export const useEmployeesLazyQuery = (
  baseOptions?: Apollo.LazyQueryHookOptions<
    EmployeesQuery,
    EmployeesQueryVariables
  >,
) => {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useLazyQuery<EmployeesQuery, EmployeesQueryVariables>(
    EmployeesDocument,
    options,
  );
};
export const useEmployeesSuspenseQuery = (
  baseOptions?: Apollo.SuspenseQueryHookOptions<
    EmployeesQuery,
    EmployeesQueryVariables
  >,
) => {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useSuspenseQuery<EmployeesQuery, EmployeesQueryVariables>(
    EmployeesDocument,
    options,
  );
};
export type EmployeesQueryHookResult = ReturnType<typeof useEmployeesQuery>;
export type EmployeesLazyQueryHookResult = ReturnType<
  typeof useEmployeesLazyQuery
>;
export type EmployeesSuspenseQueryHookResult = ReturnType<
  typeof useEmployeesSuspenseQuery
>;
export type EmployeesQueryResult = Apollo.QueryResult<
  EmployeesQuery,
  EmployeesQueryVariables
>;
export const LoginDocument = gql`
  mutation login($orgKey: String!, $id: String!, $password: String!) {
    login(orgKey: $orgKey, id: $id, password: $password) {
      token
    }
  }
`;
export type LoginMutationFn = Apollo.MutationFunction<
  LoginMutation,
  LoginMutationVariables
>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      orgKey: // value for 'orgKey'
 *      id: // value for 'id'
 *      password: // value for 'password'
 *   },
 * });
 */
export const useLoginMutation = (
  baseOptions?: Apollo.MutationHookOptions<
    LoginMutation,
    LoginMutationVariables
  >,
) => {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    options,
  );
};
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<
  LoginMutation,
  LoginMutationVariables
>;
